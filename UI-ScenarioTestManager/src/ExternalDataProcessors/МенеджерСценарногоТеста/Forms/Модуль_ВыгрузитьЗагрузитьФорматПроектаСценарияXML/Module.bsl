
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Вставить содержимое обработчика
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Отказ = Истина; // форма не предназначена для открытия
КонецПроцедуры



#Область ЗагрузкаСценарияXML


&НаКлиенте
Функция ЗагрузитьСценарийФорматXML(мОписаниеСценария, Знач ПутьКфайлу="",Знач ЗагрузкаБлока=Ложь, ОписаниеОшибки="")  Экспорт
	
	
	мОписаниеСценария.ТаблицаСценария.Очистить();
	Если ЗагрузкаБлока=Ложь Тогда
		мОписаниеСценария.ПараметрыСценария.Очистить();
	КонецЕсли;
	
	// загружаем сценарий
	Если ЗагрузитьСценарийИлиБлокФорматXML(мОписаниеСценария,ПутьКфайлу,ЗагрузкаБлока)=Ложь Тогда
		ТекстОшибки = "Не удалось загрузить сценарий по адресу ("+ПутьКфайлу+")!";
		ОписаниеОшибки = ОписаниеОшибки+ТекстОшибки+Символы.ПС;
		Сообщить(ТекстОшибки);
		СообщитьОбОшибке("мСценСкрипт_ПройтисьПоДереву",ТекстОшибки);
		Если ЗагрузкаБлока=Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// проходим и загружаем блоки внутри сценария
	ОбработанныеГБШ = новый Соответствие;
	ЗавершитьЗагрузкуБлоков = Ложь;
	ш=0;
	
	Пока ЗавершитьЗагрузкуБлоков=Ложь и ш<100 Цикл
		ш = ш +1; // защита от рекурсии
		
		МассивДляОбработкиГБШ = новый Массив; 		
		
		Для каждого стр из мОписаниеСценария.ТаблицаСценария Цикл
			Если стр.Свойства.Действие="ГотовыйБлокШагов" Тогда
				Обработан = ОбработанныеГБШ.Получить(стр);
				Если Обработан=Неопределено Тогда
					ОбработанныеГБШ.Вставить(стр,Истина);
					МассивДляОбработкиГБШ.Добавить(стр);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого блок из МассивДляОбработкиГБШ Цикл
			ПутьБлокШагов = блок.Свойства.ПутьБлокШагов;
			Если Найти(ПутьКфайлу,ПутьБлокШагов) Тогда
				Сообщить("Вызов корневого сценария в рекурсии! Исправьте сценарий! ("+ПутьБлокШагов+")");
				Продолжить;
			КонецЕсли;
			// сообщим об ошибках
			Если блок.Свойства.Свойство("Library") Тогда
				Если ЗначениеЗаполнено(блок.Свойства.Library) И НЕ ЗначениеЗаполнено(мОписаниеСценария.ПутьККаталогуБиблиотекиСценариев) Тогда
					Сообщить("При загрузке блока готовых шагов ("+блок.Свойства.Наименование+") используетя библиотека ("+блок.Свойства.Library+"), но путь в настройках редактора не указан!");
				КонецЕсли;
				// изменим путь
				Если ЗначениеЗаполнено(блок.Свойства.Library) Тогда
					ПутьБлокШагов = мОписаниеСценария.ПутьККаталогуБиблиотекиСценариев+ПутьБлокШагов;
				КонецЕсли;
			КонецЕсли;
			// загрузим блок
			Если ЗагрузитьСценарийИлиБлокФорматXML(мОписаниеСценария,ПутьБлокШагов,Истина,блок.UID,блок.FUID)=Ложь Тогда
				ОписаниеОшибки = ОписаниеОшибки+Символы.ПС+"Не удалось загрузить блок шагов ("+блок.Свойства.Наименование+") по адресу ("+ПутьБлокШагов+")!";
				Сообщить("Не удалось загрузить блок шагов ("+блок.Свойства.Наименование+") по адресу ("+ПутьБлокШагов+")!");
				
			Иначе
				блок.Свойства.ПутьБлокШагов = ПутьБлокШагов;	
			КонецЕсли;
		КонецЦикла; 
		
		ЗавершитьЗагрузкуБлоков = МассивДляОбработкиГБШ.Количество()=0;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьФайлПоИнтернетАдресу(Знач ПолныйАдресРесурса)
	
	ПутьКФайлу = "";
	
	СтруктураURI = СтруктураURI(ПолныйАдресРесурса); 
	
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт);
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
	ПутьКФайлу = ПолучитьИмяВременногоФайла();
	
	Попытка
		Результат =  HTTPСоединение.Получить(HTTPЗапрос,ПутьКФайлу);
	Исключение
		// исключение здесь говорит о том, что запрос не дошел до HTTP-Сервера
		ТекстОшибки = "Произошла сетевая ошибка!"+Символы.ПС+ОписаниеОшибки();
		Сообщить(ТекстОшибки);
		СообщитьОбОшибке("мСценСкрипт_ПройтисьПоДереву",ТекстОшибки);
		Возврат ПутьКФайлу;
	КонецПопытки;	
	
	// Анализируем фатальные ошибки
	// В большинстве случаев нужно остановить работу и показать пользователю сообщение об ошибке,
	// включив в него HTTP-статус
	
	// Ошибки 4XX говорят о неправильном запросе - в широком смысле
	// Может быть неправильный адрес, ошибка аутентификации, плохой формат запроса
	// Подробнее смотри http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4
	Если Результат.КодСостояния >= 400 и Результат.КодСостояния < 500  Тогда
		Сообщить("Код статуса больше 4XX, ошибка запроса.  Код статуса: " + Результат.КодСостояния);
	КонецЕсли;
	
	// Ошибки 5XX говорят о проблемах на сервере (возможно, прокси-сервер)
	// Это может быть программная ошибка, нехватка памяти, ошибка конфигурации и т.д.
	// Подробнее смотри http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5
	Если Результат.КодСостояния >= 500 и Результат.КодСостояния < 600  Тогда
		Сообщить("Код статуса больше 5XX, ошибка сервера. Код статуса: " + Результат.КодСостояния);
	КонецЕсли;
	
	// Обрабатываем перенаправление
	Если Результат.КодСостояния >= 300 и Результат.КодСостояния < 400  Тогда
		Сообщить("Код статуса больше 3XX, Перенаправление. Код статуса: " + Результат.КодСостояния);
		Если Результат.КодСостояния = 302 Тогда
			Сообщить("Код статуса 302, Постоянное перенаправление.");
			АдресРесурса = Результат.Заголовки.Получить("Location");
			Если АдресРесурса <> Неопределено Тогда
				Сообщить("Выполняю запрос по новому адресу " + АдресРесурса);
				ПутьКФайлу = ЗагрузитьФайлПоИнтернетАдресу(АдресРесурса);
			Иначе
				Сообщить("Сервер не сообщил адрес ресурса!");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Статусы 1XX и 2XX считаем хорошими
	Если Результат.КодСостояния < 300 Тогда 
	КонецЕсли; 	
	
	Возврат ПутьКФайлу;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьСценарийИлиБлокФорматXML(мОписаниеСценария, Знач ПутьКфайлу="",Знач ЗагрузкаБлока=Ложь,UIDКорня="00000000-0000-0000-0000-000000000000",BFUIDКорня="00000000-0000-0000-0000-000000000000")  Экспорт
	
	ЗагрузкаПоИнтернетАдресу = Ложь;
	
	// если это веб адрес, тогда загрузим с веб файла и сохраним во временный каталог
	Если Найти(ПутьКфайлу,"http:") ИЛИ Найти(ПутьКфайлу,"https:") Тогда
		
		ПутьКфайлу = ЗагрузитьФайлПоИнтернетАдресу(ПутьКфайлу);
		ЗагрузкаПоИнтернетАдресу = Истина;
		
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ИгнорироватьПробелы = Ложь;
	
	Если ПутьКфайлу="" Тогда
		ПутьКфайлу = мОписаниеСценария.ПутьКФайлуСценария;
	КонецЕсли;
	
	Попытка
		ЧтениеXML.ОткрытьФайл(сокрЛП(ПутьКфайлу));
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	// очистим логику и поддерживаемые версии
	Если ЗагрузкаБлока=Ложь Тогда
		мОписаниеСценария.Логика_Action = "";
		мОписаниеСценария.Логика_Description = "";
		мОписаниеСценария.Логика_preconditions.Очистить();
		мОписаниеСценария.Логика_effects.Очистить();
		мОписаниеСценария.ТаблицаПоддерживаемыеВерсииТК.Очистить();
	КонецЕсли;
	
	Шаг = Неопределено;
	ШагСвойства = Неопределено; 
	Параметр = Неопределено;
	МассивНовыхСтрок = новый Массив;
	МассивНовыхПараметров = новый Массив;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = "Скрипт" Тогда			
			Если ЗагрузкаБлока=Ложь Тогда
				мОписаниеСценария.ВерсияФайлаСценария = ЧтениеXML.ПолучитьАтрибут("Версия");
				// описание сценария
				мОписаниеСценария.Наименование = ЧтениеXML.ПолучитьАтрибут("Наименование");
				мОписаниеСценария.Автор = ЧтениеXML.ПолучитьАтрибут("Автор");
				мОписаниеСценария.АдресИнтернет = ЧтениеXML.ПолучитьАтрибут("АдресИнтернет");
				Если мОписаниеСценария.ВерсияФайлаСценария>="2.2" Тогда
					 //TODO: конфлик порта пришедшего по команде и из файла
					 //Объект.НомерПорта = Число(ЧтениеXML.ПолучитьАтрибут("DefaultPort"));
					 мОписаниеСценария.Браузер = ЧтениеXML.ПолучитьАтрибут("DefaultBrowser");
					 мОписаниеСценария.ИспользуемыйAPI = ЧтениеXML.ПолучитьАтрибут("DefaultAPI");
					 мОписаниеСценария.ИдентификаторТеста = ЧтениеXML.ПолучитьАтрибут("ИдентификаторТеста");
					 мОписаниеСценария.Severity = ЧтениеXML.ПолучитьАтрибут("Severity");
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЧтениеXML.Имя = "SupportedVersions" Тогда
			Если ЗагрузкаБлока=Ложь Тогда
				ЗагрузитьСценарийФорматXMLSupportedVersions(ЧтениеXML,мОписаниеСценария);
			КонецЕсли;
		ИначеЕсли ЧтениеXML.Имя = "Logic" Тогда
			Если ЗагрузкаБлока=Ложь Тогда
				ЗагрузитьСценарийФорматXMLLogic(ЧтениеXML,мОписаниеСценария);
			КонецЕсли;
		ИначеЕсли ЧтениеXML.Имя = "ТаблицаШагов" Тогда
		ИначеЕсли ЧтениеXML.Имя = "Шаг" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			Шаг = мОписаниеСценария.ТаблицаСценария.Добавить();
			МассивНовыхСтрок.Добавить(Шаг);
			ШагСвойства = Новый Структура;
			Шаг.UID = ЧтениеXML.ПолучитьАтрибут("UID");
			Шаг.PUID = ЧтениеXML.ПолучитьАтрибут("PUID");
			Шаг.FUID = ЧтениеXML.ПолучитьАтрибут("UID");
			Шаг.BFUID = BFUIDКорня;
			Если ЗагрузкаБлока=Истина Тогда
				Если Шаг.PUID = "00000000-0000-0000-0000-000000000000" Тогда
					Шаг.PUID = UIDКорня;
				КонецЕсли;
			КонецЕсли;
			Шаг.Свойства = ШагСвойства;
		ИначеЕсли ЧтениеXML.Имя = "Свойства" Тогда
			// прочтем свойства
			ЗагрузитьСценарийФорматXMLСвойстваШага(ЧтениеXML,ШагСвойства);
			Если ЗагрузкаБлока=Истина Тогда
				// перобразуем к комментарию если стоит условие TurnToCommentInBlock
				Если ШагСвойства.Свойство("TurnToCommentInBlock") И ШагСвойства.TurnToCommentInBlock=Истина Тогда
					ШагСвойства.Наименование = "В комментарий -> "+ШагСвойства.Наименование; 
					ШагСвойства.Действие = "Комментарий";
					ШагСвойства.ДанныеКартинки = мСцен_ПолучитьДанныеКартинки_НаКлиенте(ШагСвойства);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЧтениеXML.Имя = "Параметр" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			Параметр = мОписаниеСценария.ПараметрыСценария.Добавить();
			МассивНовыхПараметров.Добавить(Параметр);
			ЗагрузитьСценарийФорматXMLПараметр(ЧтениеXML,Параметр);
		ИначеЕсли ЧтениеXML.Имя = "ПараметрыСценария" Тогда
		КонецЕсли;
		          
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	// удалим если скачивали по веб
	Если ЗагрузкаПоИнтернетАдресу=Истина Тогда
		Попытка
			УдалитьФайлы(ПутьКфайлу);
		Исключение
			Сообщить("Не удалось удалить временный файл из интернета."+Символы.ПС+ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	// для блока перегенерим гуиды, кроме корня
	Если ЗагрузкаБлока=Истина Тогда
		СоответсвиеНовыхUIDРодителей = новый Соответствие;
		Для каждого стр из МассивНовыхСтрок Цикл
			НовыйUID = строка(новый УникальныйИдентификатор);
			СоответсвиеНовыхUIDРодителей.Вставить(стр.UID,НовыйUID);
			стр.UID = НовыйUID;
		КонецЦикла;
		Для каждого стр из МассивНовыхСтрок Цикл
			НовыйUID = СоответсвиеНовыхUIDРодителей.Получить(стр.PUID);
			Если НовыйUID<>Неопределено Тогда
				стр.PUID = НовыйUID;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// TO DO: удалим дубли параметров
	// по умолчанию останутся парметры, только самого верхнего сценария
	// по факту, парметры блоков загружать не нужно, они должны быть добавлены в верхний сценарий
	// но при создании нового сценария, чтобы не добавлять руками  удалим
	МассивПараметровКУдалению = новый Массив;
	Для каждого стр из МассивНовыхПараметров Цикл
		Если ЗагрузкаБлока=Истина Тогда 
			стр.ИзПодчиненных=Истина;
		КонецЕсли;
		Для каждого параметр из мОписаниеСценария.ПараметрыСценария Цикл
			Если стр=параметр Тогда
				Продолжить;
			КонецЕсли;
			// перетрем родительский
			Если стр.Имя=параметр.Имя И стр.ЗатиратьРодительскиеЗначения=Истина Тогда
				ЗаполнитьЗначенияСвойств(параметр,стр,,"ЗатиратьРодительскиеЗначения");
			КонецЕсли;			
			Если стр.Имя=параметр.Имя Тогда
				МассивПараметровКУдалению.Добавить(стр);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого стр из МассивПараметровКУдалению Цикл
		Попытка
			мОписаниеСценария.ПараметрыСценария.Удалить(стр);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьСценарийФорматXMLСвойстваШага(ЧтениеXML,ШагСвойства)
	
	Пока ЧтениеXML.Прочитать() Цикл
		ИмяТега = ЧтениеXML.Имя;
		Если ИмяТега = "Свойства" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
			Возврат;
		ИначеЕсли Найти("Активность ПродолжитьПриОшибке ЭтоГлавноеОкно ЭтоБлок SwitchSelection Cancel ИспользоватьВариантыПоиска ОдинУровеньВниз TurnToCommentInBlock",ИмяТега) 
			И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			ШагСвойства.Вставить(ИмяТега,?(ЧтениеXML.Значение="true",Истина,Ложь));
		ИначеЕсли Найти("Наименование Описание Library ПутьБлокШагов ИмяПараметра ИмяПараметра2 Area УсловиеСравнения
			| ТипОбъекта ЗаголовокОбъекта ИмяПеременной Действие ИмяОбъекта Команда Severity
			| OutputText FileName Goal CommandRef Key Type Presentation Direction RowDescription ПредставлениеДанных СвойстваПодключенияКлиентаТестирования 
			| ClickY ClickX xPath ИмяКлассаОбъекта ИдентификаторОбъекта Attribute API",ИмяТега)					
			И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			ШагСвойства.Вставить(ИмяТега,(ЧтениеXML.Значение));
		ИначеЕсли Найти("CustomCodeClient CustomCodeServer",ИмяТега) 
			И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			ШагСвойства.Вставить(ИмяТега,СокрЛП((ЧтениеXML.Значение)));
		ИначеЕсли Найти("ДанныеКартинки Интервал",ИмяТега) 
			И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			ШагСвойства.Вставить(ИмяТега,Число(ЧтениеXML.Значение));
		ИначеЕсли Найти("ЗначениеПараметра",ИмяТега) 
			И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ТипЭлемента = ЧтениеXML.ПолучитьАтрибут("Тип");
			ЧтениеXML.Прочитать();
			Если ТипЭлемента="Строка" Тогда
				ШагСвойства.Вставить(ИмяТега,(ЧтениеXML.Значение));
			ИначеЕсли ТипЭлемента="Число" Тогда
				ШагСвойства.Вставить(ИмяТега,Число(ЧтениеXML.Значение));
			ИначеЕсли ТипЭлемента="Булево" Тогда
				ШагСвойства.Вставить(ИмяТега,?(ЧтениеXML.Значение="true",Истина,Ложь));
			ИначеЕсли ТипЭлемента="Дата" Тогда				
				Попытка
					ШагСвойства.Вставить(ИмяТега,Дата(ЧтениеXML.Значение));
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			Иначе
				ШагСвойства.Вставить(ИмяТега,Строка(ЧтениеXML.Значение));
			КонецЕсли;				
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСценарийФорматXMLПараметр(ЧтениеXML,Параметр)
	
	Пока ЧтениеXML.Прочитать() Цикл
		ИмяТега = ЧтениеXML.Имя;
		Если ИмяТега = "Параметр" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
			Возврат;
		ИначеЕсли Найти("ЗатиратьРодительскиеЗначения",ИмяТега)
			И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			Параметр[ИмяТега] = ?(ЧтениеXML.Значение="true",Истина,Ложь);
		ИначеЕсли Найти("ИзПодчиненных",ИмяТега)
			И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			Параметр[ИмяТега] = ?(ЧтениеXML.Значение="true",Истина,Ложь);			
		ИначеЕсли Найти("КлиентСервер",ИмяТега) 
			И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			Параметр[ИмяТега] = ?(ЧтениеXML.Значение="true",Истина,Ложь);
		ИначеЕсли Найти("Имя ТипДанных СвязьЛогика",ИмяТега)  
			И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			Параметр[ИмяТега] = (ЧтениеXML.Значение);
		ИначеЕсли Найти("Значение",ИмяТега) 
			И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			Если Параметр.ТипДанных="Строка" Тогда
				Параметр[ИмяТега] = (ЧтениеXML.Значение);
			ИначеЕсли Параметр.ТипДанных="Булево" Тогда
				Параметр[ИмяТега] = ?(ЧтениеXML.Значение="true",Истина,Ложь);
			ИначеЕсли Параметр.ТипДанных="Число" Тогда
				Попытка
					Параметр[ИмяТега] = Число(ЧтениеXML.Значение);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			ИначеЕсли Параметр.ТипДанных="Дата" Тогда
				Попытка
					Параметр[ИмяТега] = Дата(ЧтениеXML.Значение);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			Иначе
				Параметр[ИмяТега] = Строка(ЧтениеXML.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСценарийФорматXMLLogic(ЧтениеXML,мОписаниеСценария) Экспорт
	
	стр_precondition = Неопределено;
	стр_effect = Неопределено;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.Имя = "Logic" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
			Возврат;
		ИначеЕсли ЧтениеXML.Имя = "Action" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			мОписаниеСценария.Логика_Action = СокрЛП(ЧтениеXML.Значение);
		ИначеЕсли ЧтениеXML.Имя = "Cost" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			мОписаниеСценария.Логика_Cost = Число(СокрЛП(ЧтениеXML.Значение));
		ИначеЕсли ЧтениеXML.Имя = "Description" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			мОписаниеСценария.Логика_Description = СокрЛП(ЧтениеXML.Значение);
		ИначеЕсли ЧтениеXML.Имя = "Preconditions" Тогда
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.Имя = "Preconditions" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
					Прервать;	
				ИначеЕсли ЧтениеXML.Имя = "Item" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
					стр_precondition = мОписаниеСценария.Логика_preconditions.Добавить();		
				ИначеЕсли ЧтениеXML.Имя = "Variable" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
					ЧтениеXML.Прочитать();
					стр_precondition.Variable = СокрЛП(ЧтениеXML.Значение);
				ИначеЕсли ЧтениеXML.Имя = "Value" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
					ТипДанных = "Строка";
					Попытка ТипДанных = ЧтениеXML.ПолучитьАтрибут("type"); Исключение КонецПопытки;
					ЧтениеXML.Прочитать();
					стр_precondition.Value = СокрЛП(ЧтениеXML.Значение);
					Если ТипДанных="Булево" или ТипДанных="Boolean" Тогда
						стр_precondition.Value = ?(стр_precondition.Value="true",True,False);
					ИначеЕсли ТипДанных="Число" или ТипДанных="Number" Тогда 
						стр_precondition.Value = Число(стр_precondition.Value);
					КонецЕсли;					
				КонецЕсли;	
			КонецЦикла;
		ИначеЕсли ЧтениеXML.Имя = "Effects" Тогда
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.Имя = "Effects" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
					Прервать;			
				ИначеЕсли ЧтениеXML.Имя = "Item" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
					стр_effect = мОписаниеСценария.Логика_effects.Добавить();		
				ИначеЕсли ЧтениеXML.Имя = "Variable" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
					ЧтениеXML.Прочитать();
					стр_effect.Variable = СокрЛП(ЧтениеXML.Значение);
				ИначеЕсли ЧтениеXML.Имя = "Value" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
					ТипДанных = "Строка";
					Попытка ТипДанных = ЧтениеXML.ПолучитьАтрибут("type"); Исключение КонецПопытки;
					ЧтениеXML.Прочитать();
					стр_effect.Value = СокрЛП(ЧтениеXML.Значение);
					Если ТипДанных="Булево" или ТипДанных="Boolean" Тогда
						стр_effect.Value = ?(стр_effect.Value="true",True,False);
					ИначеЕсли ТипДанных="Число" или ТипДанных="Number" Тогда 
						стр_effect.Value = Число(стр_effect.Value);
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСценарийФорматXMLSupportedVersions(ЧтениеXML,мОписаниеСценария) Экспорт
	
	стр_vs = Неопределено;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.Имя = "SupportedVersions" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат;
		ИначеЕсли ЧтениеXML.Имя = "Item" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			стр_vs = мОписаниеСценария.ТаблицаПоддерживаемыеВерсииТК.Добавить();
		ИначеЕсли ЧтениеXML.Имя = "Subject" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			стр_vs.Наименование = СокрЛП(ЧтениеXML.Значение);
		ИначеЕсли ЧтениеXML.Имя = "Version" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			стр_vs.Версия = СокрЛП(ЧтениеXML.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СохранитьСценарий

&НаКлиенте
Функция ВыгрузитьСценарийФорматXML(мОписаниеСценария,ЛогОшибок=Ложь) Экспорт

	мСценСкрипт_РазвернутьДеревоВТаблицу(мОписаниеСценария,Истина,Ложь);
	
	XMLСтрока = "";  	
	
	Попытка
		
		// Создать объект записи XML и открыть файл
		НоваяЗаписьXML = Новый ЗаписьXML;
		НоваяЗаписьXML.УстановитьСтроку("UTF-8");
		
		НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
		
		НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Скрипт");
		
		НоваяЗаписьXML.ЗаписатьАтрибут("Версия","3.3");
		НоваяЗаписьXML.ЗаписатьАтрибут("Наименование",мОписаниеСценария.Наименование);
		НоваяЗаписьXML.ЗаписатьАтрибут("Автор",мОписаниеСценария.Автор);
		НоваяЗаписьXML.ЗаписатьАтрибут("АдресИнтернет",мОписаниеСценария.АдресИнтернет);
		Если НЕ ЗначениеЗаполнено(мОписаниеСценария.ИдентификаторТеста) Тогда
			мОписаниеСценария.ИдентификаторТеста = СформироватьАвтоматическиИдентификаторТеста(мОписаниеСценария.Наименование);;
		КонецЕсли;
		НоваяЗаписьXML.ЗаписатьАтрибут("ИдентификаторТеста",мОписаниеСценария.ИдентификаторТеста);
		НоваяЗаписьXML.ЗаписатьАтрибут("Severity",мОписаниеСценария.Severity);
		
		// свойства проекта по умолчанию
		НоваяЗаписьXML.ЗаписатьАтрибут("DefaultAPI",мОписаниеСценария.ИспользуемыйAPI);
		НоваяЗаписьXML.ЗаписатьАтрибут("DefaultBrowser",мОписаниеСценария.Браузер);
		НоваяЗаписьXML.ЗаписатьАтрибут("DefaultPort",XMLСтрока(мОписаниеСценария.НомерПорта));

		// версии ТК	
		НоваяЗаписьXML.ЗаписатьНачалоЭлемента("SupportedVersions");
		НоваяЗаписьXML.ЗаписатьАтрибут("Count",Строка(мОписаниеСценария.ТаблицаПоддерживаемыеВерсииТК.Количество()));
		Для каждого стр из мОписаниеСценария.ТаблицаПоддерживаемыеВерсииТК Цикл
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Item");
				// Subject
				НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Subject");
				НоваяЗаписьXML.ЗаписатьТекст(стр.Наименование);
				НоваяЗаписьXML.ЗаписатьКонецЭлемента();
				// Version
				НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Version");
				НоваяЗаписьXML.ЗаписатьТекст(стр.Версия);
				НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		НоваяЗаписьXML.ЗаписатьКонецЭлемента();	

		// логика
		НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Logic");
		
		НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Action");
		НоваяЗаписьXML.ЗаписатьТекст(мОписаниеСценария.Логика_Action);
		НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
		
		НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Description");
		НоваяЗаписьXML.ЗаписатьТекст(мОписаниеСценария.Логика_Description);
		НоваяЗаписьXML.ЗаписатьКонецЭлемента();
		
		НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Cost");
		НоваяЗаписьXML.ЗаписатьТекст(XMLСтрока(мОписаниеСценария.Логика_Cost));
		НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
		
		// Preconditions
		НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Preconditions");
		НоваяЗаписьXML.ЗаписатьАтрибут("Count",Строка(мОписаниеСценария.Логика_preconditions.Количество()));
		Для каждого стр из мОписаниеСценария.Логика_preconditions Цикл
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Item");
				// Variable
				НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Variable");
				НоваяЗаписьXML.ЗаписатьТекст(стр.Variable);
				НоваяЗаписьXML.ЗаписатьКонецЭлемента();
				// Value
				НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Value");
				НоваяЗаписьXML.ЗаписатьАтрибут("type",Строка(ТипЗнч(стр.Value)));
				НоваяЗаписьXML.ЗаписатьТекст(XMLСтрока(стр.Value));
				НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		НоваяЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Effects
		НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Effects");
		НоваяЗаписьXML.ЗаписатьАтрибут("Count",Строка(мОписаниеСценария.Логика_effects.Количество()));
		Для каждого стр из мОписаниеСценария.Логика_effects Цикл
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Item");
				// Variable
				НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Variable");
				НоваяЗаписьXML.ЗаписатьТекст(стр.Variable);
				НоваяЗаписьXML.ЗаписатьКонецЭлемента();
				// Value
				НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Value");
				НоваяЗаписьXML.ЗаписатьАтрибут("type",Строка(ТипЗнч(стр.Value)));
				НоваяЗаписьXML.ЗаписатьТекст(XMLСтрока(стр.Value));
				НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		НоваяЗаписьXML.ЗаписатьКонецЭлемента();
		
		НоваяЗаписьXML.ЗаписатьКонецЭлемента();
		
		// ТаблицаШагов
		НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ТаблицаШагов");
		НоваяЗаписьXML.ЗаписатьАтрибут("КоличествоШагов",Строка(мОписаниеСценария.ТаблицаСценария.Количество()));
		
		Для каждого стр из мОписаниеСценария.ТаблицаСценария Цикл
			
			Узел = мОписаниеСценария.ДеревоСценария.НайтиПоИдентификатору(стр.ИдентификаторУзелаДерева);
			УзелРодитель = Узел.ПолучитьРодителя();
			
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Шаг");
			
			// индекс текущего узла
			НоваяЗаписьXML.ЗаписатьАтрибут("UID",стр.UID);
			// первоначальный индекс узла, если загрузка идет из блока готовых шагов
			НоваяЗаписьXML.ЗаписатьАтрибут("FUID",стр.FUID);
			// индекс первоначального узла блока родителя текущего узла
			НоваяЗаписьXML.ЗаписатьАтрибут("BFUID",стр.BFUID);
			
			// индекс родителя
			Если УзелРодитель=Неопределено Тогда
				НоваяЗаписьXML.ЗаписатьАтрибут("PUID","00000000-0000-0000-0000-000000000000");
			Иначе
				НоваяЗаписьXML.ЗаписатьАтрибут("PUID",УзелРодитель.UID);
			КонецЕсли;
			
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Свойства");
			
			// Активность	
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Активность");
			НоваяЗаписьXML.ЗаписатьТекст(?(Узел.Активность=Истина,"true","false"));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 			
			// Наименование
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Наименование");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.Наименование);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// Описание
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Описание");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.Описание);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ТипОбъекта
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ТипОбъекта");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.ТипОбъекта);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ЗаголовокОбъекта
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ЗаголовокОбъекта");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.ЗаголовокОбъекта);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ЭтоГлавноеОкно
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ЭтоГлавноеОкно");
			НоваяЗаписьXML.ЗаписатьТекст(?(Узел.ЭтоГлавноеОкно=Истина,"true","false"));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ИмяПеременной
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ИмяПеременной");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.ИмяПеременной);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// Действие
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Действие");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.Действие);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ИмяОбъекта
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ИмяОбъекта");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.ИмяОбъекта);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ДанныеКартинки
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ДанныеКартинки");
			НоваяЗаписьXML.ЗаписатьТекст(Строка(Узел.ДанныеКартинки));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// Команда
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Команда");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.Команда);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ПродолжитьПриОшибке
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ПродолжитьПриОшибке");
			НоваяЗаписьXML.ЗаписатьТекст(?(Узел.ПродолжитьПриОшибке=Истина,"true","false"));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// OutputText
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("OutputText");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.OutputText);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// CommandRef
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("CommandRef");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.CommandRef);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// Presentation
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Presentation");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.Presentation);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// Direction
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Direction");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.Direction);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// RowDescription
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("RowDescription");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.RowDescription);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// SwitchSelection
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("SwitchSelection");
			НоваяЗаписьXML.ЗаписатьТекст(?(Узел.SwitchSelection=Истина,"true","false"));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();			
			// Cancel
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Cancel");
			НоваяЗаписьXML.ЗаписатьТекст(?(Узел.Cancel=Истина,"true","false"));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			// Area
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Area");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.Area);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();			
			// CustomCodeClient
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("CustomCodeClient");
			НоваяЗаписьXML.ЗаписатьСекциюCDATA(Узел.CustomCodeClient);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// CustomCodeServer
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("CustomCodeServer");
			НоваяЗаписьXML.ЗаписатьСекциюCDATA(Узел.CustomCodeServer);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ПредставлениеДанных
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ПредставлениеДанных");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.ПредставлениеДанных);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// СвойстваПодключенияКлиентаТестирования
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("СвойстваПодключенияКлиентаТестирования");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.СвойстваПодключенияКлиентаТестирования);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// API
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("API");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.API);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ИмяКлассаОбъекта
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ИмяКлассаОбъекта");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.ИмяКлассаОбъекта);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			// ИдентификаторОбъекта 
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ИдентификаторОбъекта");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.ИдентификаторОбъекта);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			// Key
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Key");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.Key);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// Type
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Type");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.Type);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// FileName
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("FileName");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.FileName);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// Attribute
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Attribute");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.Attribute);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			// ОдинУровеньВниз
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ОдинУровеньВниз");
			НоваяЗаписьXML.ЗаписатьТекст(?(Узел.ОдинУровеньВниз=Истина,"true","false"));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// TurnToCommentInBlock
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("TurnToCommentInBlock");
			НоваяЗаписьXML.ЗаписатьТекст(?(Узел.TurnToCommentInBlock=Истина,"true","false"));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ClickX
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ClickX");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.ClickX);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 			
			// ClickY
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ClickY");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.ClickY);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// xPath
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("xPath");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.xPath);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 						
			// Интервал
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Интервал");
			НоваяЗаписьXML.ЗаписатьТекст(Строка(Узел.Интервал));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ИспользоватьВариантыПоиска
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ИспользоватьВариантыПоиска");
			НоваяЗаписьXML.ЗаписатьТекст(?(Узел.ИспользоватьВариантыПоиска=Истина,"true","false"));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ЭтоБлок
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ЭтоБлок");
			НоваяЗаписьXML.ЗаписатьТекст(?(Узел.ЭтоБлок=Истина,"true","false"));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 			
			// Library
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Library");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.Library);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ПутьБлокШагов
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ПутьБлокШагов");
			ПутьБлокШагов = Узел.ПутьБлокШагов;
			// пытаемся срезать путь к библиотеке, чтобы получить относительный
			// сообщим об ошибках
			Если ЗначениеЗаполнено(Узел.Library) и НЕ ЗначениеЗаполнено(мОписаниеСценария.ПутьККаталогуБиблиотекиСценариев) Тогда
				Сообщить("Имя библиотеки ("+Узел.Library+") для блока готовых шагов ("+Узел.Наименование+") указано, а путь к библиотеке нет!");
			КонецЕсли;
			Если ЗначениеЗаполнено(Узел.Library) и НЕ Найти(ПутьБлокШагов,мОписаниеСценария.ПутьККаталогуБиблиотекиСценариев) и ЗначениеЗаполнено(мОписаниеСценария.ПутьККаталогуБиблиотекиСценариев) Тогда
				Сообщить("Путь ("+ПутьБлокШагов+") блока готовых шагов ("+Узел.Наименование+") находится вне библиотеки каталога готовых шагов ("+мОписаниеСценария.ПутьККаталогуБиблиотекиСценариев+")!");
			КонецЕсли;
			// срежем
			Если ЗначениеЗаполнено(Узел.Library) и ЗначениеЗаполнено(мОписаниеСценария.ПутьККаталогуБиблиотекиСценариев) Тогда
				ПутьБлокШагов = СтрЗаменить(ПутьБлокШагов,мОписаниеСценария.ПутьККаталогуБиблиотекиСценариев,"");
				Если Лев(ПутьБлокШагов,1)<>"\" И Лев(ПутьБлокШагов,1)<>"/" Тогда
					ПутьБлокШагов = "\"+ПутьБлокШагов;
				КонецЕсли;
				Если Лев(ПутьБлокШагов,2)="\\" Тогда
					ПутьБлокШагов = Прав(ПутьБлокШагов,СтрДлина(ПутьБлокШагов)-1);
				КонецЕсли;
				Если Лев(ПутьБлокШагов,2)="//" Тогда
					ПутьБлокШагов = Прав(ПутьБлокШагов,СтрДлина(ПутьБлокШагов)-1);
				КонецЕсли;
			КонецЕсли;
			НоваяЗаписьXML.ЗаписатьТекст(ПутьБлокШагов);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 			
			// Goal
//			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Goal");
//			НоваяЗаписьXML.ЗаписатьТекст(Узел.Goal);
//			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			// ИмяПараметра
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ИмяПараметра");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.ИмяПараметра);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			// ИмяПараметра2
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ИмяПараметра2");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.ИмяПараметра2);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			// УсловиеСравнения
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("УсловиеСравнения");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.УсловиеСравнения);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			// Severity
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Severity");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.Severity);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			// ЗначениеПараметра
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ЗначениеПараметра");
			ТипЭлемента = "Строка";
			Если ТипЗнч(Узел.ЗначениеПараметра)=Тип("Число") Тогда
				ТипЭлемента = "Число";
			ИначеЕсли ТипЗнч(Узел.ЗначениеПараметра)=Тип("Булево") Тогда
				ТипЭлемента = "Булево";
			ИначеЕсли ТипЗнч(Узел.ЗначениеПараметра)=Тип("Дата") Тогда
				ТипЭлемента = "Дата";
			КонецЕсли;
			НоваяЗаписьXML.ЗаписатьАтрибут("Тип",ТипЭлемента);
			// в зависимости от типа
			Если ТипЗнч(Узел.ЗначениеПараметра)=Тип("Строка") Тогда
				НоваяЗаписьXML.ЗаписатьТекст(Узел.ЗначениеПараметра);
			ИначеЕсли ТипЗнч(Узел.ЗначениеПараметра)=Тип("Число") Тогда
				НоваяЗаписьXML.ЗаписатьТекст(СтрЗаменить(Строка(Узел.ЗначениеПараметра),Символы.НПП,""));
			ИначеЕсли ТипЗнч(Узел.ЗначениеПараметра)=Тип("Булево") Тогда
				НоваяЗаписьXML.ЗаписатьТекст(?(Узел.ЗначениеПараметра=Истина,"true","false"));
			ИначеЕсли ТипЗнч(Узел.ЗначениеПараметра)=Тип("Дата") Тогда
				НоваяЗаписьXML.ЗаписатьТекст(Формат(Узел.ЗначениеПараметра,"ДФ=yyyyMMddHHmmss"));
			Иначе
				НоваяЗаписьXML.ЗаписатьТекст(Строка(Узел.ЗначениеПараметра));
			КонецЕсли;

			НоваяЗаписьXML.ЗаписатьКонецЭлемента();			
			
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();  // конец свойств
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();  // конец шага
			
		КонецЦикла;
		
		НоваяЗаписьXML.ЗаписатьКонецЭлемента();
		
		НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ПараметрыСценария");
		НоваяЗаписьXML.ЗаписатьАтрибут("КоличествоПараметров",Строка(мОписаниеСценария.ПараметрыСценария.Количество()));
		
		Для каждого стр из мОписаниеСценария.ПараметрыСценария Цикл
			
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Параметр");
			
			// Имя
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Имя");
			НоваяЗаписьXML.ЗаписатьТекст(стр.Имя);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			
			// ТипДанных
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ТипДанных");
			НоваяЗаписьXML.ЗаписатьТекст(стр.ТипДанных);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			
			// Значение
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Значение");
			Если ТипЗнч(стр.Значение)=Тип("Строка") Тогда
				НоваяЗаписьXML.ЗаписатьТекст(стр.Значение);
			ИначеЕсли ТипЗнч(стр.Значение)=Тип("Число") Тогда
				НоваяЗаписьXML.ЗаписатьТекст(СтрЗаменить(Строка(стр.Значение),Символы.НПП,""));
			ИначеЕсли ТипЗнч(стр.Значение)=Тип("Булево") Тогда
				НоваяЗаписьXML.ЗаписатьТекст(?(стр.Значение=Истина,"true","false"));
			ИначеЕсли ТипЗнч(стр.Значение)=Тип("Дата") Тогда
				НоваяЗаписьXML.ЗаписатьТекст(Формат(стр.Значение,"ДФ=yyyyMMddHHmmss"));
			Иначе
				НоваяЗаписьXML.ЗаписатьТекст(Строка(стр.Значение));
			КонецЕсли;
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			
			// Функция
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Функция");
			НоваяЗаписьXML.ЗаписатьТекст(стр.Функция);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			
			// КлиентСервер
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("КлиентСервер");
			НоваяЗаписьXML.ЗаписатьТекст(?(стр.КлиентСервер=Истина,"true","false"));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			
			// ЗатиратьРодительскиеЗначения
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ЗатиратьРодительскиеЗначения");
			НоваяЗаписьXML.ЗаписатьТекст(?(стр.ЗатиратьРодительскиеЗначения=Истина,"true","false"));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			
			// ИзПодчиненных
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ИзПодчиненных");
			НоваяЗаписьXML.ЗаписатьТекст(?(стр.ИзПодчиненных=Истина,"true","false"));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();  			
			
			// СвязьЛогика
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("СвязьЛогика");
			НоваяЗаписьXML.ЗаписатьТекст(стр.СвязьЛогика);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
		НоваяЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Конец основного тега
		НоваяЗаписьXML.ЗаписатьКонецЭлемента();         
		XMLСтрока = НоваяЗаписьXML.Закрыть();
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Сообщить(ТекстОшибки);
		СообщитьОбОшибке("мСценСкрипт_ПройтисьПоДереву",ТекстОшибки);
	КонецПопытки;
	
	Возврат XMLСтрока;
	
КонецФункции


#КонецОбласти

#Область ВспомогательныеФункции


&НаКлиенте
Процедура мСценСкрипт_РазвернутьДеревоВТаблицу(мОписаниеСценария,ВсеУзлы=Ложь,ВсеБлоки=Истина) Экспорт
	
	мОписаниеСценария.ТаблицаСценария.Очистить();
	
	мСценСкрипт_ПройтисьПоУзлуДобавитьВТаблицу(мОписаниеСценария.ДеревоСценария,мОписаниеСценария.ТаблицаСценария,"Активность",ВсеУзлы,ВсеБлоки);
	
	КешУровней = новый Соответствие();
	МаксимальныйШаг = мОписаниеСценария.ТаблицаСценария.Количество();
	ПредыдущийУровеньШага = МаксимальныйШаг; 
	Для каждого стр из мОписаниеСценария.ТаблицаСценария Цикл
		// по умолчанию следующий
		стр.ИндексСледующегоАктивногоШага = МаксимальныйШаг;
		Узел = мОписаниеСценария.ДеревоСценария.НайтиПоИдентификатору(стр.ИдентификаторУзелаДерева);
		
		УзелРодитель = Узел.ПолучитьРодителя(); // корень?
		Уровень = ПолучитьУровень(УзелРодитель);
		Если УзелРодитель=Неопределено Тогда
			УзелРодитель = мОписаниеСценария.ДеревоСценария;
		КонецЕсли;
		
		Если НЕ Узел=Неопределено Тогда
			ИдентификаторУзелаДерева = мСценСкрипт_НайтиПервыйАктивныйШагПоУровню(УзелРодитель, Узел, "Активность", ВсеУзлы,ВсеБлоки);
			мОтбор = новый Структура("ИдентификаторУзелаДерева",ИдентификаторУзелаДерева);
			н_строки = мОписаниеСценария.ТаблицаСценария.НайтиСтроки(мОтбор);
			Если н_строки.Количество()>0 Тогда
				стр.ИндексСледующегоАктивногоШага = мОписаниеСценария.ТаблицаСценария.Индекс(н_строки[0]);
				ПредыдущийУровеньШага = стр.ИндексСледующегоАктивногоШага;				
				КешУровней.Вставить(Уровень,ПредыдущийУровеньШага);
			Иначе
				ПредыдущийУровеньШага = КешУровней.Получить(Уровень-1);
				Если ПредыдущийУровеньШага=Неопределено Тогда
					стр.ИндексСледующегоАктивногоШага = МаксимальныйШаг;
				Иначе
					стр.ИндексСледующегоАктивногоШага = ПредыдущийУровеньШага;
					КешУровней.Вставить(Уровень,ПредыдущийУровеньШага);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция мСценСкрипт_НайтиПервыйАктивныйШагПоУровню(Знач УзелРодитель, Знач ТекущийУзел, Знач ИмяПоляОтметки, Знач ВсеУзлы,Знач ВсеБлоки)

		
	// Идем далее по узлу
	Узлы = УзелРодитель.ПолучитьЭлементы();
	
	Для каждого Узел из Узлы Цикл
		
		Если НЕ ТекущийУзел=Неопределено Тогда
			Если ТекущийУзел<>Узел Тогда
				Продолжить;
			Иначе
				ТекущийУзел=Неопределено;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
				
		Если Узел[ИмяПоляОтметки]=Ложь И ВсеУзлы=Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВсеБлоки=Ложь И Узел.ЭтоБлок=Истина И Узел.Действие<>"ГотовыйБлокШагов" Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат Узел.ПолучитьИдентификатор();
		
		// Зайдем в сам Узел
		//мСценСкрипт_НайтиПервыйАктивныйШагПоУровню(Узел,ВсеУзлы,ВсеБлоки);
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция ПолучитьУровень(Узел,Знач Счетчик=0)
	
	Если Узел=Неопределено Тогда
		Возврат Счетчик;
	КонецЕсли;
	
	УзелРодитель = Узел.ПолучитьРодителя();
	Счетчик = Счетчик + 1;
	Возврат ПолучитьУровень(УзелРодитель,Счетчик);
	
КонецФункции

// Функция преобразует дерево сценария в таблицу последовательных шагов
//
// Параметры:
// УзелРодитель - ссылка на узел дерева, в рамках которого будет выполнятся преобразование в линейную таблицу
// ТаблицаСценария - ссылка на таблицу с данными (деревом)
// ИмяПоляОтментки - определяет поле в дереве, которого сообщает об активности шага
// ВсеУзлы - определяет, что будет выполнен проход по всем узлам вне зависимости от метки Активности, 
// используется Истина при сохранении. Ложь при запуске сценария
// ВсеБлоки - определяет, что алгоритм будет заходить внутрь блоков
&НаКлиенте
Процедура мСценСкрипт_ПройтисьПоУзлуДобавитьВТаблицу(Знач УзелРодитель,ТаблицаСценария,Знач ИмяПоляОтметки, Знач ВсеУзлы,Знач ВсеБлоки)

		
	// Идем далее по узлу
	Узлы = УзелРодитель.ПолучитьЭлементы();
	
	Для каждого Узел из Узлы Цикл
		
		// пропускаем обработку, если шаг не активен и не все узлы
		Если Узел[ИмяПоляОтметки]=Ложь И ВсеУзлы=Ложь Тогда
			Продолжить;
		КонецЕсли; 		
		 
		Попытка
			// сгенерим  UID
			Если НЕ ЗначениеЗаполнено(Узел.UID) Тогда
				Узел.UID = Строка(Новый UUID());
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		стр_н = ТаблицаСценария.Добавить();
		стр_н.ИдентификаторУзелаДерева = Узел.ПолучитьИдентификатор();
		ЗаполнитьЗначенияСвойств(стр_н,Узел);
		
		// не заходим в иерархию, если не стоит все блоки
		Если ВсеБлоки=Ложь И Узел.ЭтоБлок=Истина И Узел.Действие="ГотовыйБлокШагов" Тогда
			Продолжить;
		КонецЕсли;
		
		// Зайдем в сам Узел
		мСценСкрипт_ПройтисьПоУзлуДобавитьВТаблицу(Узел,ТаблицаСценария,ИмяПоляОтметки,ВсеУзлы,ВсеБлоки);
		
	КонецЦикла;
	
КонецПроцедуры



//&НаКлиенте
//Процедура ПройтиПоУзлуУстновкаЭлементаВниз(УзелРодитель,Знач Имя,Знач Значение)
//	// Идем далее по узлу
//	Узлы = УзелРодитель.ПолучитьЭлементы();
//	
//	Для каждого Узел из Узлы Цикл
//		Узел[Имя] = Значение;
//		ПройтиПоУзлуУстновкаЭлементаВниз(Узел,Имя,Значение);
//	КонецЦикла;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПройтиПоУзлуУстновкаЭлементаВнизИзменитьПоСовпадению(УзелРодитель,Знач Имя,Знач ЗначениеИскомое,Знач Значение)
//	// Идем далее по узлу
//	Узлы = УзелРодитель.ПолучитьЭлементы();
//	
//	Для каждого Узел из Узлы Цикл
//		Если Узел[Имя] = ЗначениеИскомое Тогда 
//			Узел[Имя] = Значение;
//		КонецЕсли;
//		ПройтиПоУзлуУстновкаЭлементаВнизИзменитьПоСовпадению(Узел,Имя,ЗначениеИскомое,Значение);
//	КонецЦикла;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПройтиПоУзлуГенерацияНомерШагаВниз(УзелРодитель,НомерШага=0)
//	// Идем далее по узлу
//	Узлы = УзелРодитель.ПолучитьЭлементы();
//	
//	Для каждого Узел из Узлы Цикл
//		НомерШага = НомерШага +1;
//		Узел["НомерШага"] = НомерШага;
//		ПройтиПоУзлуГенерацияНомерШагаВниз(Узел,НомерШага);
//	КонецЦикла;
//	
//КонецПроцедуры

&НаСервереБезКонтекста
Процедура СообщитьОбОшибке(ИмяФункции,Сообщение) Экспорт
	
	ЗаписьЖурналаРегистрации("МенеджерСценарногоТеста",УровеньЖурналаРегистрации.Ошибка,Неопределено,Неопределено,ИмяФункции+Символы.ПС+Сообщение);
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьАвтоматическиИдентификаторТеста(Знач Наименование)
	Ключ = Наименование;
	Ключ = СтрЗаменить(Ключ," ","_");
	Возврат Ключ;
КонецФункции

&НаКлиенте
Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(Порт <> "", Число(Порт), Неопределено));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция мСцен_ПолучитьДанныеКартинки_НаКлиенте(Узел) Экспорт
	
	Действие = "";
	ТипОбъекта = "";

	
	Попытка
		Действие = Узел.Действие;
		ТипОбъекта = Узел.ТипОбъекта;
	Исключение
	КонецПопытки;
	
	
	// Картинка в поле Картинка
	Если Действие = "" ИЛИ Действие = "UnknownNode" ИЛИ Действие = "НеизвестныйУзел" Тогда
		ДанныеКартинки = 1;
		
	ИначеЕсли Действие = "НайтиОкно" ИЛИ Действие = "НайтиОсновноеОкно"  ИЛИ Действие = "ПолучитьАктивноеОкно" Тогда
		ДанныеКартинки = 2;
		
	ИначеЕсли Действие = "НайтиФорму" Тогда
		ДанныеКартинки = 3;
		
	ИначеЕсли Действие = "Команда" И (ТипОбъекта ="FormButton" ИЛИ ТипОбъекта = "CommandInterfaceButton") Тогда
		ДанныеКартинки = 4;
		
	ИначеЕсли Действие = "НайтиОбъект" Тогда
		ДанныеКартинки = 5;
		
	ИначеЕсли Действие = "Условие" ИЛИ Действие = "OperatorIF" Тогда
		ДанныеКартинки = 6;
		
	ИначеЕсли Действие = "Команда" Тогда
		ДанныеКартинки = 7;
		
	ИначеЕсли Действие = "ПолучитьКомандныйИнтерфейс" Тогда
		ДанныеКартинки = 8;
		
	ИначеЕсли Действие = "GenerateClientConnectionScript" ИЛИ Действие = "ПодключитьТестируемоеПриложение" Тогда
		ДанныеКартинки = 9;
		
	ИначеЕсли Действие = "ЗакрытьТестируемоеПриложение" ИЛИ Действие = "GenerateClientDisconnectionScript" Тогда
		ДанныеКартинки = 10;
		
	ИначеЕсли Действие = "Комментарий" Тогда
		ДанныеКартинки = 11;
		
	ИначеЕсли Действие = "ВыполнитьПроизвольныйКодСервер" Тогда
		ДанныеКартинки = 12;
		
	ИначеЕсли Действие = "ВыполнитьПроизвольныйКодКлиент" Тогда
		ДанныеКартинки = 13;
		
	ИначеЕсли Действие = "Стоп" Тогда
		ДанныеКартинки = 14;
		
	ИначеЕсли Действие = "Пауза" Тогда
		ДанныеКартинки = 15;
		
	ИначеЕсли Действие = "СравнитьСПредставлениемДанных" Тогда
		ДанныеКартинки = 16;
		
	ИначеЕсли Действие = "ПолучитьПредставлениеДанных" Тогда
		ДанныеКартинки = 17;
		
	ИначеЕсли Действие = "ГотовыйБлокШагов" Тогда
		ДанныеКартинки = 18;
		
	ИначеЕсли Действие = "ТестовыйСлучай" Тогда
		ДанныеКартинки = 19;
		
	ИначеЕсли Действие = "ДилогВыбораФайла" Тогда
		ДанныеКартинки = 0;
		
	ИначеЕсли Действие = "Timer" ИЛИ Действие = "Таймер" Тогда
		ДанныеКартинки = 20;		
		
	ИначеЕсли Действие = "ИзПараметра1ВПараметр2" Тогда
		ДанныеКартинки = 21;
		
	ИначеЕсли Действие = "ПроверкаНаличияЭлемента" Тогда
		ДанныеКартинки = 22;
		
	ИначеЕсли Действие = "ВызватьИсключение" ИЛИ Действие="ThrowExeption" Тогда
		ДанныеКартинки = 23;
		
	ИначеЕсли Действие = "СделатьСнимокОкна" ИЛИ Действие="MakeScreenShot" Тогда
		ДанныеКартинки = 24;
		
	ИначеЕсли Действие = "Память" ИЛИ Действие="Memory" Тогда
		ДанныеКартинки = 25;
		
	ИначеЕсли Действие = "Логика" ИЛИ Действие="Logic" Тогда
		ДанныеКартинки = 26;
		
	ИначеЕсли Действие = "ЦиклДляКаждого" ИЛИ Действие="OperatorForEach" Тогда
		ДанныеКартинки = 35;		
		
	КонецЕсли;
	
	Возврат ДанныеКартинки;
	
КонецФункции

#КонецОбласти